[tox]
envlist =
    py36,
    migrations
skip_missing_interpreters = true
minversion = 3.5.0
isolated_build = true

# Configure special Tox environment used for isolated building of the source
# package.
[testenv:.package]
# Use the default Python 3 version available on the system.
# NOTE: This makes it portable to CI systems where only one particular Python 3
# version is installed.
basepython = python3

[testenv]
basepython = python3.6
extras = test
setenv =
    # Enable pytest to find Django's setting module.
    py36: PYTHONPATH={toxinidir}/tests
passenv =
    # Pass environment variables controlling project's tests.
    py36,migrations: DRFR_*
whitelist_externals =
    migrations: bash
    migrations: psql

commands_pre =
    # Verify installed packages have compatible dependencies.
    # NOTE: Running 'pip check' after installation is necessary since pip
    # currently lacks dependency resolution which means it can silently create
    # broken installations.
    # For more details, see: https://github.com/pypa/pip/issues/988.
    pip check

commands =
    # General tests commands:
    # Run tests.
    py36: pytest

    # Migrations commands:
    migrations: psql --username={env:DRFR_POSTGRESQL_USER:drfr} \
    migrations:     --host={env:DRFR_POSTGRESQL_HOST:localhost} \
    migrations:     --port={env:DRFR_POSTGRESQL_PORT:55435} \
    migrations:     --command='CREATE DATABASE "'{env:DRFR_POSTGRESQL_NAME:drfr}'"'
    migrations: python tests/manage.py migrate
    migrations: bash -c '[[ $(./tests/manage.py makemigrations --dry-run) = '\
    migrations:     '"No changes detected" ]] || exit 1'

[pytest]
DJANGO_SETTINGS_MODULE = settings
